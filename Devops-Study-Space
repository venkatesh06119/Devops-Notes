                                    11.LINUX COMMANDS 


==============================================================================11-Linux-command-space-11======================================================================================================

LINUX: Free and Open-source OS
OS: Operating system -- > communication blw user & system.

TYPES OF OS:
1. WINDOWS
2. LINUX
3. MAC OS

LINUX COMPONENTS:

1. KERNEL: Manages hardware components (CPU, MEMORY, etc --)
           The lowest level of OS.

2. DAEMON: Manage the Background Service (Lights, Sounds, schedule)
           While starting the system.

3. SHELL: Manage the User Inputs (Command, Script, programs)
          Takes input from the user and executes and gives the output.
           

LINUX OS FLAVOURS/DISTRIBUTIONS:

IPHONE: 14, 14+, 14 PRO, 14 PRO MAX,
VERSIONS: 14, 13, 12, 11

MAIN:
RedHat
Ubuntu  (75%)
Amazon Linux

MODES:
1. GUI: Its having the Dashboard
2. CLI: Command line interface (Works with commands only)

HISTORY:
1991 -- > Linus Torvalds -- > student from finland.
1991 -- > Want to create an OS that works like UNIX.
LINUX is Written in C Programming. (1972)
Firstly he wanted to name it as 'Freax' but later it became 'Linux'.
1992 -- > Linxu's initial version was released. 
TOTAL PROGRAMMING LANGUAGES: 700 +

OPEN SOURCE:
It is free no need to pay money.
It is available publically.
We can change the code.
we can give a copy of the code to other people.

ADVANTAGES:
It's free and open-source.
Multi-user based.
Fewer Bugs.
Better Performance.
It can be used for all programming languages.
It will hang very rarely.

===========================================================================

DAY-02: SERVER & COMMANDS

MOBAXTERM LINK: https://download.mobatek.net/2312023031823706/MobaXterm_Portable_v23.1.zip

NOTE: Go to the path where you have keypair
CONNECT: SELECT THE SERVER -- > CONNECT -- > SSH CLINET -- > COPY TO TERMINAL
PASTE: 1. RIGHT CLICK 2. SHIFT + INSERT


COMMANDS:
ec2-user: default user       root: admin
*	: refers all in linux


sudo -i		: switch to root user form ec2-user
clear/ctrl + l	: to clear the screen
touch file1	: to create a file
ll/ls		: to list the files
ll -a / ls -a	: to list the hidden files
pwd		: to show the present working directory
cat file1	: to show the content in a file
more file1	: to show the content in a file
cat>file1	: to insert the content
enter, ctrl d	: to save the content
cat>>file1	: to insert the content more than one time.

cp file1 file2	: to copy the content from file1 to file2
mv file1 file5	: to rename file1 to file5
rm file2	: to remove file2
rm file4 -f	: to remove file4 forcefully
rm * -f		: to remove all files forcefully

touch java{1..5}: to create series of files
rm j* -f	: to remove all the files starting with j
wc file1	: to see number of lines, words & characters.

head file2	: to print top 10 lines
head -7 file2	: to print top 7 lines
head -5 file2	: to print top 5 lines

tail file2	: to print bottom 10 lines
tail -7 file2	: to print bottom 7 lines
tail -5 file2	: to print bottom 5 lines
sed -n '6,16p' file2 : to print form line numbers 6 to 16

FOLDERS = DIRECTORIES

mdkir dir1	: to create a folder
cd dir1		: to go inside the directory
cd ..		: to go back one directory
rmdir dir1	: to remove a directory

echo "hai raham" > file3
===============================================================


DAY-03:

STATIC: We can't modify
DYNAMIC: We can mofify

VI/VIM EDITOR: Used to edit files and insert content.
i: used to modify/insert content
esc: to get out from insert mode

3. SAVE MODE:

:w	: to save 
:q	: to quit 
:wq	: to save & quit
!	: forcefully

2. INSERT MODE:

A	: End of line
I	: Starting of line
O	: Create new line above existing line
o	: Create new line below existing line

1. COMMAND MODE:

yy	: copies single line
p	: paste single line
dd	: delete single line
u	: undo

nyy	: copies n lines
np	: pastes n line
ndd	: delete n lines
nu	: undo n times

gg	: top of file
shift+g	: bottom of file
:15	: to go to line 15
:set number: print lines inside the file

===========================================================================================================

HARDWARE:

cat /proc/meminfo	: to show memory information
lsmem			: to show memory information
cat /proc/cpuinfo	: to show cpu information
lscpu			: to show cpu information
cat /etc/os-release	: to print flavoure


fdisk -l		: to show the ebs volume info
lsblk			: to show the ebs volume info

df			: to show the mount point
df -m			: to show the mount point in mb

free			: to show how much ram is available
free -m			: to show how much ram is available

yum install lshw -y	: to install the package 
lshw			: to show the hardware information.
====================================================================================================================


USERS: 
ec2-user: he is the default user.

root: he is the admin, he will have all permissions.
superuser: 
he is a normal user created by root user.
normal user -- > visudo -- > super user

useradd raham: to create a user
cat /etc/passwd: to see the users list.

user -- > GROUP & FOLDER

cat /etc/group: to see the groups list.
ls /home: to show user folder on home 
id raham: to show the user info
passwd raham: to assign password for user

NOTE: in linux password will not be visible.
password -- > more than 8 char. 
username should not be given as password.

To create super user:
1. create user (useradd raham)
2. password (passwd raham)
3. visudo -- > 100 -- > yy & p -- > root=raham

su - rajesh : to login to super user

NOTE: In linux if you are on non root use sudo command 


root -- > normal -- > visudo -- > super user 

logout or ctrl d used to exit from super user.


=============================================================

-rw-r--r-- 1 root root 0 Jun  8 16:02 file1


TYPE OF FILES:
-	: Regular file
b	: Blocked file
c	: Charcter file
d	: Directory
l	: link file

PERMISSION:

rw-r--r--
r	: read		: 4
w	: write		: 2
x	: executable	: 1

user	: rw-	: 4+2+0	: 6
group	: r--	: 4+0+0	: 4
others	: r--	: 4+0+0	: 4


chmod 777 file1
chmod 666 file2

1	: acl -- > access control list


chown raham file1: to make raham as owner to file1
chgrp raham file1: to make raham as group to file1
chown raham:raham file2 : to make raham user&group for file2
chown rajesh:raham file1: rajesh as user & raham as group


groupadd devops	: to create devops group
usermod -aG devops raham : to add raham user to devops group
usermod -aG aws raham : to add raham user to aws group

gpasswd --delete raham devops : to remove raham user form devops group
userdel raham : to delete raham user

=======================================================================================================

DAY-05:


GREP : Global Regular Expression Print
to search for a particular word

grep is file1		: to search word is on file1
grep IS file1 -i	: to avoid the case sensitive
grep IS file1 -i -v	: to avoid the line which is having word is
cat file1 | grep is	: to search word is on file1
cat file1 | grep IS -i	: to avoid the case sensitive
cat file1 | grep IS -iv : to avoid the line which is having word is

| : is pipe sysmbol -- > to work with pipe we need to have 2 commands
here 1 st command output will be input of 2 nd command.

lscpu | grep cpu -i
lsmem | grep memory -i
dmesg | grep image -i


SED: Stream Editor -- > to replace words in a file.

%s/is/abc/ -- > to replace is with abc
sed '3c/abc/' file1  -- > to replce 3rd line in a file
sed 's/linux/unix/' file1-- > single word replace
sed 's/linux/unix/; s/session/class/' file1 -- > multi word replace
cat file1 -n -- > to print line numbers in a file
sed '=' file1 -- > to print line numbers in a file
sed -n '5,13p' file1 -- > to print line 5 to 13
sed -e '5,13p' file1 -- > to print line 5 to 13 double times

NETWORKING:
ip addr
ip addr show
hostname -i
ifconfig          -- > all the 4 commands used to show ip address

ping google.com -- > to get response form server
ping -c 4 google.com
netstat   --- > to show active internet connections
ps  -- > to check the process
kill -9 32555 -- > to kill a process
ps aux -- > to list process in ids

===========================================================================

LINUX DIRECTORY SYSTEM:
FHS 


bin	: it stores all the binary files and also it stores the commands that had been executed by the user.
sbin	: it stores the commands that had been executed by the super user.
boot	: it contains boot images & boot files.
dev	: it contains all the device files
etc	: it contains all the host specific system configuration files.
lib	: it contains all the library files of the system.
lib64	: it contains all the library files of the system of 64 bit.
mnt	: it is used for the mounting purpose.
opt	: it stores all the file details of the 3 rd party when it installed.
proc	: it is used to see all the processing related files (Hardware details).
srv	: it stores all the service related information provided by system.
sys	: it stores any new changes that obtained while changing Hardware.
tmp	: it stores temperory files and have access to all.
usr	: it contains local system files which are continuing with the old system architecture.
var	: it stores all the system services.




========================================================================================-END-SPACE - ==================================================================


                                                              12.GIT




12-06-2023: DAY-01: INTRO, INSTALLATION, ARCHITECTURE & COMMANDS (ADD, COMMIT, STATUS, RESTORE, LOGS)

GIT:
yum install git -y: to install git
git init: to initialize .git repo (local repo)

vim index.html (untracked)
git status: show the stage of file
git add index.html: to track index.html
git commit -m "commit-1" index.html: to commit index.html
git log: to show the commits 
git log --oneline: to show logs on single line
git log -2: shows recent 2 logs
git log -5: shows recent 5 logs
git show e6bde29: to show the files which is committed to it
git show css1: to show which commit applied to file css1

TO CONFIGURE USER & EMAIL:
git config user.name "rahamshaik"
git config user.email "rahamshaik@gmail.com"
git log


RESTORE: TRACK -- > UNTRACK

touch file
git status
git add file1
git status
git restore --staged file1
git status

NOTE: It should not be committed.
if you try to untrack the committed file we need to modify the file.

HISTORY:

  1  mkdir netflic
    2  mv netflic/ netflix
    3  cd netflix/
    4  yum install git -y
    5  ls -al
    6  git init
    7  ls -al
    8  vim index.html
    9  git status
   10  git add index.html
   11  git status
   12  git commit -m "commit-1" index.html
   13  git status
   14  ll
   15  touch css{1..5}
   16  ll
   17  git status
   18  git add *
   19  git status
   20  git commit -m "commit-2" *
   21  git log
   22  git log --oneline
   23  git show e6bde29
   24  git show css1
   25  git config user.name "rahamshaik"
   26  git config user.email "rahamshaik@gmail.com"
   27  git log
   28  ll
   29  touch js{1..5}
   30  ll
   31  git status
   32  git add *
   33  git status
   34  git commit -m "commit-3" *
   35  git log
   36  git log -2
   37  git log -1
   38  toych file1
   39  touch file1
   40  git status
   41  git add file1
   42  git status
   43  git restore --staged file1
   44  git status
   45  git add file1
   46  git status
   47  git restore --staged file1
   48  git status
   49  git add file1
   50  git status
   51  ll
   52  vim index.html
   53  git status
   54  history

===============================================================

13-06-2023: DAY-02: BRACHES, MEREGE, REBASE, GITHUB

BRANCH: It is an individual line of development.
developers can develop the source code independently.
Default branch -- > Master 
master & main branches are called as long living branches
dev, qa, hotfix, release branches are called as short-living branches.

git branch: to list the branches
git branch movies: to create a branch called movies
git checkout movies: to switch to branch called movies
git checkout -b recharge: to create and switch at a time.




MERGE: Used to merge file blw two branches

git checkout master
git merge movies
git merge train


REBASE: Used to merge file blw two branches
git rebase recharge
git rebase dth



HISTORY:

 1  mkdir paytm
    2  cd paytm/
    3  yum install git -y
    4  git --version
    5  git -v
    6  ls -al
    7  git init
    8  ls -al
    9  touch file1
   10  git statsu
   11  git status
   12  git add file1
   13  git config user.name "raham"
   14  git config user.email "raham@gmail.com"
   15  git commit -m "commit-1" file1
   16  git branch
   17  git branch movies
   18  git branch
   19  ll
   20  git checkout movies
   21  git branch
   22  touch movies{1..5}
   23  git add movies*
   24  git config user.name "dev1"
   25  git config user.email "dev1@gmail.com"
   26  git commit -m "movies-v.1.0" movies*
   27  git log
   28  git show 79b58f79bed0d748b4e8b3390443ed67133be9da
   29  ll
   30  git checkout master
   31  ll
   32  git checkout movies
   33  git branch
   34  git branch train
   35  git branch
   36  git checkout train
   37  ll
   38  touch train{1..5}
   39  ll
   40  git status
   41  git add *
   42  git config user.name "dev2"
   43*
   44  git commit -m "train-v.1.0" *
   45  git branch
   46  git checkout -b recharge
   47  git branch
   48  ll
   49  git branch
   50  git log
   51  touch recharge{1..5}
   52  git add *
   53  git config user.name "dev3"
   54  git config user.email "dev3@gmail.com"
   55  git commit -m "recharge-v.1.0" *
   56  ll
   57  git checkout master
   58  git branch
   59  ll
   60  git checkout -b dth
   61  git branch
   62  ll
   63  touch dth{1..5}
   64  git add *
   65  git config user.name "dev4"
   66  git config user.email "dev4@gmail.com"
   67  git commit -m "dth-v.1.0" *
   68  git branch
   69  git checkout master
   70  ll
   71  git merge movies
   72  ll
   73  git merge train
   74  ll
   75  git rebase recharge
   76  ll
   77  git rebase dth
   78  ll
   79  git remote add origin https://github.com/kodaganivshnuvardhan/paytm.git
   80  ls -al
   81  git push origin master
   82  ll
   83  git checkout dth
   84  git branch
   85  git branch -D master
   86  git branch

 ======================================================================
 
 14-06-2023: DAY-03: PULL, PUSH, REVERT, CHERRYPICK, STASH & SOME UI CONECOTS OF GITHUB
 
 REVERT: To undo the merging of two branches
git revert branchname

CHERRY-PICK: To MERGE SPECIFIC FILES 
git cherry-pick commit-id

STATSH: To hide the un committed files/to save the work temperorly
git stash	: to hide the tracked files
git stash apply	: it will show the hidede file
git stash list	: it shows the list of stashes
git stash pop	: remove last stash
git statsh clear: remove all the stashes

PUSH: to send files from local to central repo
git push origin branchname

PULL: it will get changes from central to local.
git pull origin branchname

HISTORY:

1  mkdir paytm
    2  cd paytm/
    3  yum install git -y
    4  git init
    5  git branch
    6  touch file1
    7  git add file1
    8  git config user.email "raham@gmail.com"
    9  git config user.name  "raham"
   10  git commit -m "raham commits" file1
   11  git branch
   12  git branch movies
   13  git branch
   14  git checkout movies
   15  touch movies{1..5}
   16  git add *
   17  git config user.email "dev1@gmail.com"
   18  git config user.name "dev1"
   19  git commit -m "dev1 commits" *
   20  git log
   21  git branch
   22  ll
   23  git checkout -b train
   24  ll
   25  touch train{1..5}
   26  git add *
   27  git config user.email "dev2@gmail.com"
   28  git config user.name "dev2"
   29  git commit -m "dev2 commits" *
   30  git status
   31  ll
   32  git checkout -b recharge
   33  ll
   34  touch recharge{1..5}
   35  git add *
   36  git config user.email "dev3@gmail.com"
   37  git config user.name "dev3"
   38  git commit -m "dev3 commits" *
   39  ll
   40  git checkout -b dth
   41*
   42  touch dth{1..5}
   43  git add *
   44  git config user.email "dev4@gmail.om"
   45*
   46  git commit -m "dev4 commits" *
   47*
   48  ll
   49  git merge movies
   50  git merge train
   51  git rebase recharge
   52  git rebase dth
   53  ll
   54  git remote add origin https://github.com/RAHAMSHAIK007/paytmrepositry.git
   55  git push origin master
   56  git branch
   57  git push origin movies
   58  git push origin recharge
   59  git push origin train
   60  ps
   61  kill -9 6745 6744 6743
   62  ps
   63  git push origin train
   64  git push origin dth
   65  git branch
   66  ll
   67  git checkout movies
   68  ll
   69  touch movies{6..10}
   70  git add *
   71  git config user.email "dev1@gmail.om"
   72  git config user.name "dev1"
   73  git commit -m "dev1 2nd commits" *
   74  git checkout master
   75  ll
   76  git merge movies
   77  git revert movies
   78  ll
   79  git checkout movies
   80  ll
   81  git merge train
   82  ll
   83  git revert train
   84  ll
   85  git merge recharge
   86  ll
   87  git rebase recharge
   88  ll
   89  git rebase movies
   90  ll
   91  git checkout train
   92  ll
   93  git merge recharge
   94  ll
   95  git rebase recharge
   96  ll
   97  git revert recharge
   98  ll
   99  git branch
  100  git branch -m recharge abcd
  101  git branch
  102  git branch -m abcd recharge
  103  git branch
  104  git branch -D recharge
  105  git branch
  106  git logs
  107  git log
  108  ll
  109  cd
  110  mkdir abcd
  111  cd abcd/
  112  git init
  113  git branch -m branch1
  114  touch file1
  115  git add *
  116  git commit -m "abcd" file1
  117  git branch
  118  git checkout -b branch2
  119  ll
  120  touch java{1..5}
  121  git add *
  122  git commit -m "java commits" *
  123  touch python{1..5}
  124  git add *
  125  git commit -m "python commits" *
  126  git log --oneline
  127  git checkout branch1
  128  ll
  129  git cherry-pick 20d8330
  130  ll
  131  git cherry-pick 7f25b18
  132  ll
  133  cd
  134  ll
  135  mkdir raham
  136  cd raham/
  137  git init
  138  touch file1
  139  git add file1
  140  ll
  141  git stash
  142  git commit -m "one" file1
  143  touch file2
  144  git add file2
  145  git stash
  146  ll
  147  git stash apply
  148  ll
  149  git stash
  150  ll
  151  git stash list
  152  git stash pop
  153  git stash list
  154  git stash clear
  155  ll
  156  cd ..
  157  ll
  158  cd paytm/
  159  git branch
  160  git checkout master
  161  ll
  162  cat dth1
  163  git pull origin master
  164  cat dth1
  165  git pull origin master
  166  cat dth1
  167  git branch
  168  git pull
  169  cat dth
  170  cat dth1
  171  git pull origin master
  172   git config pull.rebase true
  173  git pull origin master
  174  cat dth1
  175  git pull origin master
  176  cat dth1
  177  history

===========================================================================================

DAY-04: MERGE CONFILICT, FORK , CLONE , UI TOPICS


 1  mkdir abcd
    2  cd abcd/
    3  yum install git -y
    4  git init
    5  vim file1
    6  git add file1
    7  git commit -m "dev-1 commits" file1
    8  git branch
    9  git branch -m master branch1
   10  git branch
   11  git checkout -b branch2
   12  vim file1
   13  git add file1
   14  git commit -m "dev-2 commits" file1
   15  cat file1
   16  git checkout -b branch
   17* git checkout  branch1
   18  cat file1
   19  git checkout branch1
   20  cat file1
   21  vim file1
   22  git add file1
   23  git commit -m "dev-1 2nd commits" file1
   24  cat file1
   25  git merge branch2
   26  git diff file1
   27  vim file1
   28  git status
   29  git add file1
   30  git status
   31  git commit -m "abcd" file1
   32  git commit -m "abcd"
   33  cat file1
   34  git status
   35  ll
   36  git log
   37  git log --oneline
   38  git show bd46d71
   39  git show bd46d71 --stat
   40  git commit --amend -m "raham"
   41  git log --oneline
   42  git commit --amend -m "devops"
   43  git log --oneline
   44  git commit --amend -m "aws"
   45  git log --oneline
   46  git reset 7dcc9af
   47  git log --oneline
   48  git update-ref -d HEAD
   49  git log --oneline
   50  cd
   51  ll
   52  git clone https://github.com/RAHAMSHAIK007/ansible-jenkinsproject.git
   53  ll
   54  cd ansible-jenkinsproject
   55  ll
   56  git branch
   57  cd
   58  git clone https://github.com/RAHAMSHAIK


========================================================================================-END-SPACE - ==================================================================


                                    13. MAVEN


MAVEN:

INSTALL:

wget https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz
tar -zxvf apache-maven-3.8.8-bin.tar.gz
cd apache-maven-3.8.8-bin.tar.gz

yum install java-1.8.0-openjdk -y
java -version
yum install maven -y
mvn --version
yum install tree -y

WORKING WITH PROJECT:
mvn archetype:generate	: To generate the project structure

Define value for property 'groupId': raham
Define value for property 'artifactId': swiggy
Define value for property 'version' 1.0-SNAPSHOT: :
Define value for property 'package' raham: : devops

mvn compile: to compile the code (.java=.class)
mvn test: to test the code (Apptest.java=Apptest.class)
mvn package: to generate jar file on the project folder
mvn install: to generate jar file on the maven folder
mvn clean: to clear the source code

mvn clean package: to will do the above actions

HISTORY:

 1  wget https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz
    2  ll
    3  tar -zxvf apache-maven-3.8.8-bin.tar.gz
    4  ll
    5  cd apache-maven-3.8.8
    6  ll
    7  mvn archetype-generate
    8  yum install java-1.8.0-openjdk -y
    9  java -version
   10  yum install maven -y
   11  maven --version
   12  mvn --version
   13  mvn archetype-generate
   14  ll
   15  mvn archetype-generate
   16  mvn archetype:generate
   17  ll
   18  cd swiggy/
   19  ll
   20  yum install tree -y
   21  tree
   22  cat src/main/java/devops/App.java
   23  tree
   24  mvn compile
   25  tree
   26  mvn test
   27  tree
   28  mvn package
   29  tree
   30  cd target/
   31  ll
   32  cd ..
   33  ll
   34  mvn install
   35  cd /root/.m2/repository/raham/swiggy/
   36  ls
   37  ls 1.0-SNAPSHOT/
   38  mvn test
   39  cd
   40  ll
   41  cd apache-maven-3.8.8/
   42  ll
   43  cd swiggy/
   44  ll
   45  mvn clean
   46  ll
   47  mvn compile
   48  mvn test
   49  tree
   50  mvn package
   51  tree
   52  mvn install
   53  ll
   54  mvn clean
   55  ll
   56  mvn install
   57  tree
   58  ll
   59  history

========================================================================================-END-SPACE - ==================================================================

                                              13.JENKINS

19-06-2023: intro, setup, ci, custom workspace, shell 

CI - CONTINOUS INTEGRATION (BUILD + TEST) = OLD CODE WITH NEW CODE
CD - CONTINOUS DELIVERY		: Deployment to production is manual
CD - CONTINOUS DEPLOYMET	: Deployment to production is automated

ENV:
DEV	: DEVELOPERS
TEST	: TESTER
STAGING	: BEFORE PRODUCTION
UAT	: CLIENT
PROD	: USERS (LIVE)

PRE/NON PROD: DEV, TEST, UAT, STATING.
HIGH AVAILABILTY - MORE THAN ONE SERVER. (ONE -1A, TWO - 1B)

PIPELINE: 
SERIES OF EVENTS INTERNINKED WITH EACH OTHER.
STEP BY STEP EXECUTION OF A PROCESS.

JENKINS: PORT - 8080

SETUP:
STEP-1: GETTING REP0 (jenkins.io -- > downloads -- > Redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

STEP-2: INSTALLING JAVA 11
amazon-linux-extras install java-openjdk11 -y

STEP-3: INSTALLING GIT JENKINS MAVEN 
yum install git maven jenkins -y

STEP-4: STARTING THE SERVICE (any service will be on stopped state when its installed)
systemctl start jenkins
systemctl status jenkins

STEP-5: CONNECTING TO JENKINS
Public-ip:8080 -- > browser


CUSTOM WORKSPACE: it will gives the output on our desired location.

mkdir -p swiggy/jenkinsbuilds/
cd /root/swiggy/jenkinsbuilds

jenkins ui -- > jobname -- > configure -- > advance -- > custom workspace -- > /root/swiggy/jenkinsbuilds -- > save
chown jenkins:jenkins /root
chown jenkins:jenkins /root/*

HISTORY:

  1    sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
    2    sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
    3  amazon-linux-extras install java-openjdk11 -y
    4  java -version
    5  yum install git maven jenkins -y
    6  systemctl start jenkins
    7  systemctl status jenkins
    8  cat /var/lib/jenkins/secrets/initialAdminPassword
    9  cd /var/lib/jenkins/workspace/job1
   10  ll
   11  java -version
   12  ll
   13  ls -ltrh
   14  pwd
   15  cd
   16  ll
   17  mkdir -p swiggy/jenkinsbuilds
   18  ll
   19  pwd
   20  cd swiggy/jenkinsbuilds/
   21  pwd
   22  cd /
   23  ll
   24  chown jenkins:jenkins root/
   25  ll
   26  cd root/
   27  ll
   28  cd /
   29  chown jenkins:jenkins root/*
   30  ll
   31  cd /root/
   32  ll
   33  cd swiggy/
   34  ll
   35  chown jenkins:jenkins jenkinsbuilds/
   36  ;;
   37  ll
   38  cd jenkinsbuilds/
   39  pwd
   40  ll
   41  history
=====================================================================================================================================================================
21-06=2023: PARAMETERS, VARIABLES

Parameters are the inputs given by the user while building.

1. USER DEFINED PARAMETERS: this parameters can be given by user only.

a. Choice parameter: used when we have multiple options to generate a build but need to use only on specific one.
b. String Parameter: it passess user input in single line.
c. Multi Line string parameter: it passess user input in Multi line.
d. File Parameter: It is used to build local files on jenkins.
e. Boolean Parameter: it is used for yes or no options.

2. VARIABLES: which will store the values & changes as per the time.

a. USER DEFINED VARS: 
1. LOCAL VARS: it will work inside a job

name=siva
loc=hyderabad
echo "hai all my name is $name, $name is comming from $loc"


2. GLOBAL VARS: it will work outside of a job
Dashboard -- > Manage Jenkins -- > System -- > Environment vars -- > add 

b. JENKINS ENVIRONMENT VARS: it can be defined by user

==================================================================

DAY-03: 

CRONJOB: To schedule the works

*	: Minutes
*	: Hours
*	: Date
*	: Month
*	: day (0=sun)

9:00 am 23 : 0 9 23 6 5
10:30 pm 22: 30 22 22 6 4

POLLSCM: It will set a time limit if the source code change on that time it will build.

WEBHOOKS: If the developer changes the code then it will build at that point of time.

THROTTLE BUILD: To restric the number of builds for time(M,H,D,W,M)

PASSWORDLESS LOGIN: 
cd /var/lib/jenkins
vim config.xml -- > line 7 : true=false -- > :wq
systemctl restart jenkins

LINKED JOBS: one job is depending on another job.

===================================================

DAY-04:

PIPELINE: 
Series of events interlinked with each other.
Step-by-step execution of a process.

TYPES:
1. SCRIPTED
2. DECLARTIVE  -- > SHORTCUT: PASSS


examples:

pipeline {
    agent any 
    
    stages {
        stage('one') {
            steps {
                sh 'touch file1'
            }
        }
    }
}

-----------------------

pipeline {
    agent any 
    
    stages {
        stage('one') {
            steps {
                sh 'touch file1'
            }
        }
        stage('two') {
            steps {
                sh 'lscpu'
            }    
        }
    }
}

---------------------------

pipeline {
    agent any 
    
    stages {
        stage('one') {
            steps {
                sh 'touch file1'
            }
        }
        stage('two') {
            steps {
                sh 'lscpu'
            }    
        }
        stage('three') {
            steps {
                sh 'lsmem'
            }
        }
    }
}

----------------------------------------------------------------------------

PIPELINE AS A CODE: Executing mutiple actions on single stage.

pipeline {
    agent any 
    
    stages {
        stage('one') {
            steps {
                sh 'touch file1'
                sh 'lscpu'
                sh 'lsmem'
            }
        }
    }
}


PIPELINE AS A CODE ON MULTI STAGE:

pipeline {
    agent any 
    
    stages {
        stage('one') {
            steps {
                sh 'touch file1'
                sh 'lscpu'
                sh 'lsmem'
            }
        }
        stage('two') {
            steps {
                sh 'touch file2'
                sh 'free'
            }
        }
    }
}

====================================================================================

PIPELINE AS A CODE OVER SINGLE SHELL:

pipeline {
    agent any 
    
    stages {
        stage('one') {
            steps {
                sh '''
                lscpu
                lsmem
                free
                '''
            }
        }
    }
}

====================================================================================================

VARS ON PIPELINE:

pipeline {
   agent any
   environment {
       name = 'raham'
   }
   stages {
       stage('ENV') {
           steps {
               sh 'echo "${BUILD_ID}"'
               sh 'echo "${JOB_NAME}"'
               sh 'echo "${name}"'
           }
       }
   }
}


pipeline {
   agent any
   environment {
       name = 'raham'
       loc= 'hyd'
   }
   stages {
       stage('ENV') {
           steps {
               sh 'printenv'
           }
       }
   }
}

===============================================================================

pipeline {
   agent any
   
       parameters {
           choice(name: 'server', choices: ['a','b','c'], description: "")       }
   stages {
       stage('parameters') {
           steps {
               echo 'this is my prod stage'
           }
       }
   }
}



pipeline {
   agent any
       parameters {
           booleanParam(name: 'db', defaultValue: true, description: "")
       }
   stages {
       stage('parameters') {
           steps {
               echo 'this isn my prod stage'
           }
       }
   }
}

pipeline {
   agent any
    environment {
           name = 'raham'
       }
       parameters {
           string(name: 'person', defaultValue: 'raham shaik', description: "how are you")
       }
   stages {
       stage('parameters') {
           steps {
               sh 'echo "${name}"'
               sh 'echo "${person}"'
           }
       }
   }
}

======================================================================================================

pipeline {
    agent any 
    
    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/devopsbyraham/jenkins-java-project.git'
            }
        }
        stage('build') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('package') {
            steps {
                sh 'mvn clean package'
            }
        }
    }
}


HISTORY:

  1  vim jenkins.sh
    2  sh jenkins.sh
    3  cd /var/lib/jenkins/
    4  ll
    5  vim config.xml
    6  systemctl restart jenkins.service
    7  systemctl status jenkins.service
    8  cd /var/lib/jenkins/workspace/JOB-2/
    9  ll
   10  systemctl status jenkins.service
   11  systemctl restart jenkins.service
   12  chkconfig on jenkins
   13  chkconfig --add jenkins
   14  systemctl status jenkins.service
   15  cd /var/lib/jenkins/workspace/ci-job/
   16  ll
   17  java -version
   18  yum remove maven* java* -y
   19  mvn --version
   20  java -version
   21  yum install java-1.8.0-openjdk -y
   22  java -version
   23  yum install maven -y
   24  mvn --version
   25  amazon-linux-extras install java-openjdk11 -y
   26  mvn --version
   27  java -version
   28  update-alternatives --config java
   29  java -version
   30  mvn --version
   31  git -v
   32  java -version
   33  mvn --version
   34  git -v
   35  systemctl restart jenkins.service
   36  systemctl status jenkins.service
   37  cd /var/lib/jenkins/workspace/
   38  cd ci-job
   39  ll
   40  cd target/
   41  ll
   42  cd classes
   43  ll
   44  ls in/
   45  ls in/javahome/
   46  ls in/javahome/myweb/
   47  ls in/javahome/myweb/controller/
   48  cd
   49  history
   50  java -version
   51  update-alternatives --config java
   52  java -version
   53  update-alternatives --config java
   54  java -version
===================================
day-05: postbuild & master slave

POST-BUILD ACTIONS: the actions which comes after build.

1- always: it will execute all the time 

success cause:
pipeline {
    agent any
    
    stages {
        stage("one") {
            steps {
                echo "hai all"
            }
        }
    }
    post {
        always {
            echo "hello world"
        }
    }
}

failuer cause:
pipeline {
    agent any
    
    stages {
        stage("one") {
            steps {
                ech "hai all"
            }
        }
    }
    post {
        always {
            echo "hello world"
        }
    }
}


2-success: it will trigger if the build is success

success cause:

pipeline {
    agent any
    
    stages {
        stage("one") {
            steps {
                echo "hai all"
            }
        }
    }
    post {
        success {
            echo "hello world"
        }
    }
}

failuer cause:
pipeline {
    agent any
    
    stages {
        stage("one") {
            steps {
                ech "hai all"
            }
        }
    }
    post {
        always {
            echo "hello world"
        }
    }
}


3-failuer: 

pipeline {
    agent any
    
    stages {
        stage("one") {
            steps {
                echo "hai all"
            }
        }
    }
    post {
        failure {
            echo "hello world"
        }
    }
}

pipeline {
    agent any
    
    stages {
        stage("one") {
            steps {
                ech "hai all"
            }
        }
    }
    post {
        failure {
            echo "hello world"
        }
    }
}

-------------------------------------------------------------------------------------------------------------------------------------

INPUT PARAMETER:

pipeline {
    agent any

    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/RAHAMSHAIK007/jenkins-java-project.git'
            }
        }
        stage('build') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('test') {
            input {
                message 'can we test it'
                ok 'yes'
            }
            steps {
                sh 'mvn test'
            }
        }
        stage('artifact') {
            steps {
                sh 'mvn clean package'
            }
        }
    }
}

=================================================================================================================

MASTER-SLAVE:
1. it will distribute the builds
2. it will reduce load on master
3. it will reduce the memory useage of master

CREATE A SERVER AND INSTALL JAVA-11
amazon-linux-extras install java-openjdk11 -y

Dashboard  Manage Jenkins Manage Nodes & clouds -- > New node -- > Name -- > Permanent Agent

Number of executors - no of builds paralelly (3)
Remote root directory - where your builds will be stored (/tmp)
Labels - assigning job to slave (swiggy)
Usage - last options
Launch method - last option
host - 172.31.82.90 (privateip)
Credentials -- > add -- > kind: ssh username with privatekey -- > username: ec2-usrer -- > privatekaey -- > add -- > pem -- > add -- > select ec2-user -- > Host Key Verification Strategy - last option


============================
27-06-2023:

RBAC	: ROLE BASED ACCESS CONTROL
To restrict the jenkins Control for the users.
authentication - who can signin
authorization - who can work

user-1: EXP (rajesh)           user-2:FRESHER (raju)	USER-3: FRESHER

1. USERS: Dashboard -- > Manage Jenkins -- > security -- > Users (crearte 2 users)
2. PLUGIN: Dashboard -- > Manage Jenkins -- > Plugins -- > Available plugins -- > Role-based Authorization Strategy  -- > install -- > goback to top
3. Dashboard  -- > Manage Jenkins -- > Security -- > Authorization: Role-Based strategy
4. ROLES : Dashboard  -- > Manage Jenkins -- > Security -- > Manage and Assign Roles -- >
   create Fresher & Experience roles and give permissions(EXP: ADMIN, FRE: BUILD AND READ)
5. ASSIGN ROLES: user-1: EXP           user-2:FRESHER

==============================================================================
LIST VIEW: USED TO SEPERATE/FILTER THE JOBS.
MY VIEW: USED TO SHOW THE JOBS WHICH I HAVE PERMISSIONS.
BUILD PIPELINE VIEW: To show the process of linked jobs -- > PLUGINS -- > AVAILABLE -- > Build Pipeline -- > INSTALL




































